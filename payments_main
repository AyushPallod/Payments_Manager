import sqlite3
import tkinter as tk
from tkinter import ttk, messagebox
from tkcalendar import DateEntry, Calendar
from datetime import datetime, timedelta

# Database class to manage SQLite operations
class Database:
    def __init__(self, db_name='payments.db'):
        self.conn = sqlite3.connect(db_name)
        self.conn.row_factory = sqlite3.Row
        self.init_db()

    def init_db(self):
        c = self.conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS companies
                     (company_name TEXT PRIMARY KEY, due_duration_days INTEGER)''')
        c.execute('''CREATE TABLE IF NOT EXISTS payments
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      company_name TEXT,
                      entry_date DATE,
                      amount REAL,
                      due_date DATE,
                      s_checked INTEGER DEFAULT 0,
                      d_checked INTEGER DEFAULT 0,
                      FOREIGN KEY(company_name) REFERENCES companies(company_name))''')
        self.conn.commit()

    def insert_company(self, company_name, due_duration_days):
        c = self.conn.cursor()
        c.execute('INSERT OR REPLACE INTO companies (company_name, due_duration_days) VALUES (?, ?)',
                  (company_name, due_duration_days))
        self.conn.commit()

    def get_companies(self):
        c = self.conn.cursor()
        c.execute('SELECT company_name FROM companies')
        return [row['company_name'] for row in c.fetchall()]

    def get_due_duration(self, company_name):
        c = self.conn.cursor()
        c.execute('SELECT due_duration_days FROM companies WHERE company_name = ?', (company_name,))
        row = c.fetchone()
        return row['due_duration_days'] if row else None

    def insert_payment(self, company_name, entry_date, amount, due_date, s_checked=0, d_checked=0):
        c = self.conn.cursor()
        c.execute('INSERT INTO payments (company_name, entry_date, amount, due_date, s_checked, d_checked) VALUES (?, ?, ?, ?, ?, ?)',
                  (company_name, entry_date, amount, due_date, s_checked, d_checked))
        self.conn.commit()

    def get_payments_due_on(self, date):
        c = self.conn.cursor()
        c.execute('SELECT * FROM payments WHERE due_date = ?', (date,))
        exact_date_payments = c.fetchall()
        c.execute('SELECT * FROM payments WHERE due_date < ? AND s_checked = 0 AND d_checked = 0', (date,))
        overdue_unchecked_payments = c.fetchall()
        return exact_date_payments + overdue_unchecked_payments

    def update_payment_checkboxes(self, payment_id, s_checked, d_checked):
        c = self.conn.cursor()
        c.execute('UPDATE payments SET s_checked = ?, d_checked = ? WHERE id = ?',
                  (s_checked, d_checked, payment_id))
        self.conn.commit()

    def close(self):
        self.conn.close()

# Main application class
class PaymentApp(tk.Tk):
    def __init__(self, db):
        super().__init__()
        self.db = db
        self.title("Payment Management System")
        self.geometry("1000x700")  # Fixed window size
        self.configure(bg='lightgray')

        style = ttk.Style()
        style.configure('Treeview', font=('Arial', 10, 'bold'), foreground='black')
        style.configure('Treeview.Heading', font=('Arial', 10, 'bold'), foreground='black')

        # Input Section
        input_frame = ttk.LabelFrame(self, text="Enter Payment Details")
        input_frame.pack(fill='x', padx=10, pady=(10, 5), ipady=5)

        ttk.Label(input_frame, text="Company:", font=('Arial', 10, 'bold')).grid(row=0, column=0, padx=5, pady=5, sticky='e')
        self.company_var = tk.StringVar()
        self.company_combo = ttk.Combobox(input_frame, textvariable=self.company_var, width=25)
        self.company_combo.grid(row=0, column=1, padx=5, pady=5, sticky='w')
        self.company_combo.bind('<KeyRelease>', self.filter_companies)
        self.populate_companies()

        ttk.Label(input_frame, text="Entry Date:", font=('Arial', 10, 'bold')).grid(row=1, column=0, padx=5, pady=5, sticky='e')
        self.entry_date = DateEntry(input_frame, date_pattern='dd-mm-yyyy', width=23)
        self.entry_date.grid(row=1, column=1, padx=5, pady=5, sticky='w')

        ttk.Label(input_frame, text="Amount:", font=('Arial', 10, 'bold')).grid(row=2, column=0, padx=5, pady=5, sticky='e')
        self.amount_var = tk.StringVar()
        ttk.Entry(input_frame, textvariable=self.amount_var, width=25).grid(row=2, column=1, padx=5, pady=5, sticky='w')

        ttk.Button(input_frame, text="Submit Payment", command=self.submit_payment).grid(row=3, column=0, columnspan=2, pady=10)
        ttk.Button(input_frame, text="Add New Company", command=self.add_company).grid(row=4, column=0, columnspan=2, pady=5)

        # Due Payments Section
        due_frame = ttk.LabelFrame(self, text="Payments Due")
        due_frame.pack(fill='both', expand=True, padx=10, pady=(5, 10), ipady=5)

        self.calendar = Calendar(due_frame, selectmode='day', date_pattern='dd-mm-yyyy')
        self.calendar.pack(side='left', padx=10, pady=5)
        self.calendar.bind("<<CalendarSelected>>", self.update_due_payments)

        self.due_list = ttk.Treeview(due_frame, columns=('S', 'D', 'Company', 'Entry Date', 'Amount', 'Due Date'), show='headings', height=15)
        self.due_list.heading('S', text='S')
        self.due_list.heading('D', text='D')
        self.due_list.heading('Company', text='Company')
        self.due_list.heading('Entry Date', text='Entry Date')
        self.due_list.heading('Amount', text='Amount')
        self.due_list.heading('Due Date', text='Due Date')
        self.due_list.column('S', width=30, anchor='center')
        self.due_list.column('D', width=30, anchor='center')
        self.due_list.column('Company', width=150)
        self.due_list.column('Entry Date', width=100)
        self.due_list.column('Amount', width=80)
        self.due_list.column('Due Date', width=100)
        self.due_list.pack(side='left', fill='both', expand=True, padx=10, pady=5)
        self.due_list.tag_configure('lightyellow', background='#FFFF99')
        self.due_list.tag_configure('lightgreen', background='#99FF99')
        self.due_list.tag_configure('lightblue', background='#99CCFF')
        self.due_list.tag_configure('lightred', background='#FF9999')
        self.due_list.bind('<Button-1>', self.toggle_checkbox)

        self.total_label = ttk.Label(due_frame, text="", font=('Arial', 10, 'bold'))
        self.total_label.pack(side='bottom', pady=5)

        today = datetime.today().strftime('%d-%m-%Y')
        self.show_due_payments(today)

    def populate_companies(self):
        companies = self.db.get_companies()
        self.company_combo['values'] = companies
        if companies:
            self.company_combo.current(0)

    def submit_payment(self):
        company = self.company_var.get()
        entry_date_str = self.entry_date.get()
        amount = self.amount_var.get()
        if not all([company, entry_date_str, amount]):
            messagebox.showerror("Error", "All fields are required")
            return
        try:
            amount = float(amount)
            entry_date_dt = datetime.strptime(entry_date_str, '%d-%m-%Y')
            entry_date = entry_date_dt.strftime('%Y-%m-%d')
        except ValueError:
            messagebox.showerror("Error", "Invalid date or amount format")
            return
        due_duration = self.db.get_due_duration(company)
        if due_duration is None:
            messagebox.showerror("Error", "Company not found")
            return
        due_date_dt = entry_date_dt + timedelta(days=due_duration)
        due_date = due_date_dt.strftime('%Y-%m-%d')
        self.db.insert_payment(company, entry_date, amount, due_date)
        messagebox.showinfo("Success", "Payment submitted")
        self.show_due_payments(self.calendar.selection_get().strftime('%d-%m-%Y'))
        self.amount_var.set('')

    def add_company(self):
        add_window = tk.Toplevel(self)
        add_window.title("Add New Company")
        add_window.geometry("300x150")

        ttk.Label(add_window, text="Company Name:", font=('Arial', 10, 'bold')).pack(pady=5)
        company_name_entry = ttk.Entry(add_window)
        company_name_entry.pack(pady=5)

        ttk.Label(add_window, text="Due Duration (days):", font=('Arial', 10, 'bold')).pack(pady=5)
        due_duration_entry = ttk.Entry(add_window)
        due_duration_entry.pack(pady=5)

        def save_company():
            name = company_name_entry.get()
            duration = due_duration_entry.get()
            if not all([name, duration]):
                messagebox.showerror("Error", "All fields required")
                return
            try:
                duration = int(duration)
            except ValueError:
                messagebox.showerror("Error", "Duration must be an integer")
                return
            self.db.insert_company(name, duration)
            self.populate_companies()
            add_window.destroy()
            messagebox.showinfo("Success", "Company added")

        ttk.Button(add_window, text="Save", command=save_company).pack(pady=10)

    def update_due_payments(self, event):
        selected_date = self.calendar.selection_get().strftime('%d-%m-%Y')
        self.show_due_payments(selected_date)

    def show_due_payments(self, date_str):
        self.due_list.delete(*self.due_list.get_children())
        selected_date_dt = datetime.strptime(date_str, '%d-%m-%Y')
        selected_date = selected_date_dt.strftime('%Y-%m-%d')
        payments = self.db.get_payments_due_on(selected_date)
        company_totals = {}
        for payment in payments:
            s_checked = '[x]' if payment['s_checked'] else '[ ]'
            d_checked = '[x]' if payment['d_checked'] else '[ ]'
            company = payment['company_name']
            amount = payment['amount']
            entry_date_display = datetime.strptime(payment['entry_date'], '%Y-%m-%d').strftime('%d-%m-%Y')
            due_date_display = datetime.strptime(payment['due_date'], '%Y-%m-%d').strftime('%d-%m-%Y')
            company_totals[company] = company_totals.get(company, 0) + amount
            self.due_list.insert('', 'end', iid=payment['id'], values=(
                s_checked, d_checked, company, entry_date_display, f"{amount:.2f}", due_date_display
            ))
            self.update_row_color(payment['id'])
        total_text = "Totals: " + "  ".join(f"{c}: {t:.2f}" for c, t in company_totals.items())
        self.total_label.config(text=total_text)

    def toggle_checkbox(self, event):
        region = self.due_list.identify_region(event.x, event.y)
        if region == 'cell':
            column = self.due_list.identify_column(event.x)
            if column in ['#1', '#2']:
                item = self.due_list.identify_row(event.y)
                payment_id = item
                values = list(self.due_list.item(item, 'values'))
                col_idx = int(column[1:]) - 1
                is_checked = values[col_idx] == '[x]'
                new_state = 0 if is_checked else 1
                s_state = 1 if values[0] == '[x]' else 0
                d_state = 1 if values[1] == '[x]' else 0
                if col_idx == 0:
                    s_state = new_state
                else:
                    d_state = new_state
                self.db.update_payment_checkboxes(payment_id, s_state, d_state)
                values[0] = '[x]' if s_state else '[ ]'
                values[1] = '[x]' if d_state else '[ ]'
                self.due_list.item(item, values=values)
                self.update_row_color(item)

    def update_row_color(self, item):
        values = self.due_list.item(item, 'values')
        s_checked = values[0] == '[x]'
        d_checked = values[1] == '[x]'
        due_date_display = values[5]
        due_date = datetime.strptime(due_date_display, '%d-%m-%Y').date()
        today = datetime.today().date()
        if due_date < today and not (s_checked or d_checked):
            self.due_list.item(item, tags=('lightred',))
        elif s_checked:
            self.due_list.item(item, tags=('lightyellow',))
        elif d_checked:
            self.due_list.item(item, tags=('lightgreen',))
        else:
            self.due_list.item(item, tags=('lightblue',))

    def filter_companies(self, event):
        typed = self.company_var.get()
        companies = self.db.get_companies()
        filtered = [c for c in companies if typed.lower() in c.lower()] if len(typed) >= 3 else companies
        self.company_combo['values'] = filtered

if __name__ == "__main__":
    db = Database()
    app = PaymentApp(db)
    app.mainloop()
    db.close()
